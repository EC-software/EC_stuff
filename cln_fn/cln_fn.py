#!/usr/bin/python

import os
import string

VALID = string.ascii_letters + string.digits + '_- .'
SUBST = {'$': 'S',
         '!': '_',
         '¬°': '_',
         '‚Ä¶': '_',
         '%': '_',
         '&': '_',
         '#': '_',
         "'": '_',
         '`': '',
         '¬¥': '',
         '‚Äô': '',
         '(': '_',
         ')': '_',
         '+': '_',
         '‚òÖ': '_',
         '¬§': '_',
         '¬±': '_',
         '=': '_',
         ',': '_',
         ',': '_',
         ':': '_',
         ';': '_',
         '@': '_',
         '[': '_',
         ']': '_',
         '{': '_',
         '}': '_',
         '¬´': '_',
         '¬ª': '_',
         '~': '-',
         '‚Äì': '-',  # apparently not a normal hyphen ...
         '‚Äî': '-',  # apparently not a normal hyphen ...
         '√Ä': 'A',
         '√°': 'a',
         '√†': 'a',
         '√£': 'a',
         '√ß': 'c',
         '–µ': 'e',  # apparently not a normal e ...
         '√©': 'e',
         '√´': 'e',
         '√â': 'E',
         '√®': 'e',
         'eÃÅ': 'e',
         '√ü': 'ss',
         '√™': 'e',
         '√≠': 'i',
         '–∫': 'k',
         '√≥': 'o',
         '√º': 'u',
         '—É': 'y',
         '√¶': 'ae',
         '√Ü': 'AE',
         '√Ñ': 'AE',
         '√§': 'ae',
         '√∏': 'oe',
         '√ò': 'OE',
         '√ñ': 'OE',
         '√•': 'aa',
         '√Ö': 'AA',
         '√∂': 'OE',
         '–ê': 'A',  # Russian?
         '–í': 'B',  # Russian?
         '–î': 'D',  # Russian?
         '–ï': 'E',  # Russian?
         '–ñ': 'X',  # Russian?
         '–ò': 'N',  # Russian?
         '–ô': 'N',  # Russian?
         '–ö': 'K',  # Russian?
         '–ù': 'H',  # Russian?
         '–û': 'O',  # Russian?
         '–†': 'P',  # Russian?
         '–°': 'C',  # Russian?
         '–ì': 'R',  # Russian?
         '–ß': 'y',  # Russian?
         '–´': 'bl',  # Russian?
         ',': ',',
        '–∞': 'a',
        '–±': 'd',
        '–≤': 'B',
        '–µ': 'e',
        '–∂': 'X',
        '–∏': 'n',
        '–π': 'n',
        '–∫': 'k',
        '–ª': 'r',
        '–Ω': 'H',
        '–æ': 'o',
        '–ø': 'n',
        '—Ä': 'p',
        '—Å': 'c',
        '—Ç': 'T',
        '—É': 'y',
        '—Ö': 'x',
        '—Ü': 'y',
        '—é': 'h',
        '—è': 'R',
         '‚Ñ¢': '',
         'üé©': '',
         'üêá': '',
         '‚ñ∂': 'Ô∏è',
         '‚ñ∂': '',
         '‚ù§': '',
         '‚ô•': '',
         '‚úÖ': '',
         '\u9654': '',
         '\u65039': '',
         '\u2009': '',
         '\u200a': '',
         '\u200b': '',
         '\u200c': '',
         '\u200d': '',
         '\u202c': '',
         '\xa0': ''
         }
ROOT = "/home/output/.TMP/"  # "/run/media/martin/SAMSUNG"   # /.TMP/NEWS_1"
ZONEY = "/home/output/.TMP/"

print(f"Valid: {VALID}")
print(f"NoVal: {''.join(SUBST.keys())}")

set_invalids = set()
num_invalids = 0

for root, dirs, files in os.walk(ROOT):
    path = root.split(os.sep)
    # print((len(path) - 1) * '---', os.path.basename(root))
    for file in files:
        # print(len(path) * '---', file)
        if not all(c in VALID for c in file):  # If not a valid name
            lst_bad = sorted(list(set([c for c in file if c not in VALID])))
            lst_cnv = [ord(c) for c in lst_bad]
            set_invalids.update(lst_bad)
            num_invalids += 1
            if any(c not in SUBST.keys() for c in lst_bad):
                print(f" Bad char(s) {lst_bad}: {lst_cnv}: {root}{os.sep}{file}")
            else:  # Make a swap
                if root.startswith(ZONEY):
                    newf = file
                    for key_s in SUBST.keys():
                        newf = newf.replace(key_s, SUBST[key_s])
                    str_fno = root+os.sep+file
                    str_fnn = root+os.sep+newf
                    print(f"\n< {str_fno}\n> {str_fnn}")
                    os.rename(str_fno, str_fnn)

print(f"num: {num_invalids}")
print(f"set: {sorted(list(set_invalids))}")
